# A bunch of random, complex logic meant to exercise the full range of language
# syntax.

[state_vector]
U32 state @alias S
U64 time @alias G
I8 a
I16 b
I32 c
I64 d
U8 e
U16 f @read_only @alias spam
U32 g @alias eggs
U64 h
F32 i
F64 j
bool k
I32 foo
I32 bar
I32 baz
F64 qux
F64 corge
F64 grault
I8 alpha_sv
I16 beta_sv
I32 gamma_sv
I64 delta_sv
U8 epsilon_sv
U16 zeta_sv
U32 eta_sv
U64 theta_sv
F32 iota_sv
F64 kappa_sv
bool lambda_sv
F64 pi_sv
F64 tau_sv
F32 euler_sv
F64 tintin_sv
F64 haddock_sv
bool calculus_sv

[local]
I8 alpha = 10
I16 beta = -87
I32 gamma = 32000
I64 delta = 4 @read_only
U8 epsilon = 0
U16 zeta = (1337 + alpha) * delta
U32 eta = 1522
U64 theta = 10000000000
F32 iota = 1522.47238947289439
F64 kappa = -978.4378927472389300000003213
bool lambda = true
F64 pi = 3.14159265359 @read_only
F64 tau = pi * 2 @read_only
F32 euler = 2.71828 @read_only
F64 tintin = 0
F64 haddock = 0
bool calculus = false

[Foo]
.entry
    # Entry actions
    lambda = !lambda
    kappa = kappa + (delta * iota / beta) + pi + euler
    # Calculations involving all the input state vector elements, which are
    # randomized when run in unit tests.
    tintin = (a + b / d + e) / f * g - ((h - i) / j)
    haddock = k + foo + bar + baz + qux + corge + grault
.step
    # Copy local elements to state vector.
    alpha_sv = alpha
    beta_sv = beta
    gamma_sv = gamma
    delta_sv = delta
    epsilon_sv = epsilon
    zeta_sv = zeta
    eta_sv = eta
    theta_sv = theta
    iota_sv = iota
    kappa_sv = kappa
    lambda_sv = lambda
    pi_sv = pi
    tau_sv = tau
    euler_sv = euler
    tintin_sv = tintin
    haddock_sv = haddock
    calculus_sv = calculus
    # If branch using braces
    k = !k
    k {
        true: alpha = alpha + 1
        kappa = kappa * -1
    }
    # roll_avg function; stats function with a window size expression that
    # references variables
    gamma = roll_avg(kappa + zeta, alpha + 2) - 10.433
    T < 20 or k {
        # Nested if branch
        lambda or k == false {
            theta = theta - 3
            # If branch using colon
            k: theta = theta + eta / 10
            # Else branch using colon
            else: theta = theta - 2
        }
        theta = theta - 4
    }
    # Else branch using braces
    else {
        theta = theta + zeta
        # roll_median function
        iota = iota - tau + roll_median(gamma + 3, 4)
    }
    # Transition
    T >= 50: -> Bar
    a = a + 1
    # Use of global time element
    G < 17: lambda = kappa
    else: lambda = T > 5
.exit
    # Exit action; expression using all arithmetic operators
    kappa = iota - euler * euler + pi - (tau + alpha / eta)
    # Expression using all logical operators
    calculus = k or !true or not not (!!!false and true)

[Bar]
.entry
    eggs = 1
.step
    # Copy local elements to state vector.
    alpha_sv = alpha
    beta_sv = beta
    gamma_sv = gamma
    delta_sv = delta
    epsilon_sv = epsilon
    zeta_sv = zeta
    eta_sv = eta
    theta_sv = theta
    iota_sv = iota
    kappa_sv = kappa
    lambda_sv = lambda
    pi_sv = pi
    tau_sv = tau
    euler_sv = euler
    tintin_sv = tintin
    haddock_sv = haddock
    calculus_sv = calculus
    # If branch using if keyword
    eggs = eggs + eggs
    if eggs > 2 {
        iota = iota / (eggs - 4)
    }
    # roll_min function
    roll_min(eggs, alpha / 5) > 10: -> Baz

[Baz]
.entry
    d = 2
    haddock = 0
.step
    # Copy local elements to state vector.
    alpha_sv = alpha
    beta_sv = beta
    gamma_sv = gamma
    delta_sv = delta
    epsilon_sv = epsilon
    zeta_sv = zeta
    eta_sv = eta
    theta_sv = theta
    iota_sv = iota
    kappa_sv = kappa
    lambda_sv = lambda
    pi_sv = pi
    tau_sv = tau
    euler_sv = euler
    tintin_sv = tintin
    haddock_sv = haddock
    calculus_sv = calculus
    # roll_max function
    tintin = roll_max(haddock, 3)
    # roll_range function
    qux = roll_range(tintin, 7)
    # Double inequality
    lambda = (5 < T <= 8)
    d = d * 2
    haddock = haddock + d * pi / 4 * -1
    d == 1024: -> Foo
